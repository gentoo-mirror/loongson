From 55c6339cc81c08ad48e65b598a9d8a526b423389 Mon Sep 17 00:00:00 2001
From: Yang Yujie <yangyujie@loongson.cn>
Date: Wed, 8 Sep 2021 16:29:53 +0800
Subject: [PATCH 24/51] Enable basic soft-float support for loongarch.

---
 sysdeps/loongarch/__longjmp.S                 |  2 +
 sysdeps/loongarch/bits/setjmp.h               |  3 ++
 sysdeps/loongarch/{lp64 => fpu}/s_cosf.S      |  0
 sysdeps/loongarch/{lp64 => fpu}/s_sinf.S      |  0
 sysdeps/loongarch/preconfigure                |  2 +
 sysdeps/loongarch/setjmp.S                    |  2 +
 .../loongarch/lp64/{ => fpu}/jmp_buf-macros.h |  0
 .../loongarch/lp64/nofpu/jmp_buf-macros.h     | 41 +++++++++++++++++++
 8 files changed, 50 insertions(+)
 rename sysdeps/loongarch/{lp64 => fpu}/s_cosf.S (100%)
 rename sysdeps/loongarch/{lp64 => fpu}/s_sinf.S (100%)
 rename sysdeps/unix/sysv/linux/loongarch/lp64/{ => fpu}/jmp_buf-macros.h (100%)
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/lp64/nofpu/jmp_buf-macros.h

diff --git a/sysdeps/loongarch/__longjmp.S b/sysdeps/loongarch/__longjmp.S
index 32325753f6..45868b4be5 100644
--- a/sysdeps/loongarch/__longjmp.S
+++ b/sysdeps/loongarch/__longjmp.S
@@ -34,6 +34,7 @@ ENTRY (__longjmp)
 	REG_L s7, a0, 11*SZREG
 	REG_L s8, a0, 12*SZREG
 
+#ifndef __loongarch_soft_float
 	FREG_L $f24, a0, 13*SZREG + 0*SZFREG
 	FREG_L $f25, a0, 13*SZREG + 1*SZFREG
 	FREG_L $f26, a0, 13*SZREG + 2*SZFREG
@@ -42,6 +43,7 @@ ENTRY (__longjmp)
 	FREG_L $f29, a0, 13*SZREG + 5*SZFREG
 	FREG_L $f30, a0, 13*SZREG + 6*SZFREG
 	FREG_L $f31, a0, 13*SZREG + 7*SZFREG
+#endif
 
 	sltui	a0,a1,1
 	add.d	a0, a0, a1	 # a0 = (a1 == 0) ? 1 : a1
diff --git a/sysdeps/loongarch/bits/setjmp.h b/sysdeps/loongarch/bits/setjmp.h
index 4b1440e07d..5ac1caee56 100644
--- a/sysdeps/loongarch/bits/setjmp.h
+++ b/sysdeps/loongarch/bits/setjmp.h
@@ -32,8 +32,11 @@ typedef struct __jmp_buf_internal_tag
   /* Callee-saved registers.  */
   long int __regs[9];
 
+#ifndef __loongarch_soft_float
   /* Callee-saved floating point registers.  */
   double __fpregs[8];
+#endif
+
 } __jmp_buf[1];
 
 #endif /* _LOONGARCH_BITS_SETJMP_H */
diff --git a/sysdeps/loongarch/lp64/s_cosf.S b/sysdeps/loongarch/fpu/s_cosf.S
similarity index 100%
rename from sysdeps/loongarch/lp64/s_cosf.S
rename to sysdeps/loongarch/fpu/s_cosf.S
diff --git a/sysdeps/loongarch/lp64/s_sinf.S b/sysdeps/loongarch/fpu/s_sinf.S
similarity index 100%
rename from sysdeps/loongarch/lp64/s_sinf.S
rename to sysdeps/loongarch/fpu/s_sinf.S
diff --git a/sysdeps/loongarch/preconfigure b/sysdeps/loongarch/preconfigure
index 26ffe88416..79699c6751 100644
--- a/sysdeps/loongarch/preconfigure
+++ b/sysdeps/loongarch/preconfigure
@@ -2,6 +2,8 @@ case "$machine" in
 loongarch*)
 	base_machine=loongarch
 	machine=loongarch/lp64
+
+        with_fp_cond="!defined __loongarch_soft_float"
 	;;
 esac
 
diff --git a/sysdeps/loongarch/setjmp.S b/sysdeps/loongarch/setjmp.S
index e7fec53a3a..5b51b5799e 100644
--- a/sysdeps/loongarch/setjmp.S
+++ b/sysdeps/loongarch/setjmp.S
@@ -43,6 +43,7 @@ ENTRY (__sigsetjmp)
 	REG_S s7, a0, 11*SZREG
 	REG_S s8, a0, 12*SZREG
 
+#ifndef __loongarch_soft_float
 	FREG_S $f24, a0, 13*SZREG + 0*SZFREG
 	FREG_S $f25, a0, 13*SZREG + 1*SZFREG
 	FREG_S $f26, a0, 13*SZREG + 2*SZFREG
@@ -51,6 +52,7 @@ ENTRY (__sigsetjmp)
 	FREG_S $f29, a0, 13*SZREG + 5*SZFREG
 	FREG_S $f30, a0, 13*SZREG + 6*SZFREG
 	FREG_S $f31, a0, 13*SZREG + 7*SZFREG
+#endif
 
 #if !IS_IN (libc) && IS_IN(rtld)
 	li.w		v0, 0
diff --git a/sysdeps/unix/sysv/linux/loongarch/lp64/jmp_buf-macros.h b/sysdeps/unix/sysv/linux/loongarch/lp64/fpu/jmp_buf-macros.h
similarity index 100%
rename from sysdeps/unix/sysv/linux/loongarch/lp64/jmp_buf-macros.h
rename to sysdeps/unix/sysv/linux/loongarch/lp64/fpu/jmp_buf-macros.h
diff --git a/sysdeps/unix/sysv/linux/loongarch/lp64/nofpu/jmp_buf-macros.h b/sysdeps/unix/sysv/linux/loongarch/lp64/nofpu/jmp_buf-macros.h
new file mode 100644
index 0000000000..ebf911ff8a
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/lp64/nofpu/jmp_buf-macros.h
@@ -0,0 +1,41 @@
+/* Copyright (C) 2020-2021 Free Software Foundation, Inc.
+
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library.  If not, see
+   <http://www.gnu.org/licenses/>.  */
+
+/* Produced by this program:
+
+   #include <stdio.h>
+   #include <unistd.h>
+   #include <setjmp.h>
+   #include <stddef.h>
+
+   int main (int argc, char **argv)
+   {
+       printf ("#define JMP_BUF_SIZE %d\n", sizeof (jmp_buf));
+       printf ("#define JMP_BUF_ALIGN %d\n", __alignof__ (jmp_buf));
+       printf ("#define SIGJMP_BUF_SIZE %d\n", sizeof (sigjmp_buf));
+       printf ("#define SIGJMP_BUF_ALIGN %d\n", __alignof__ (sigjmp_buf));
+       printf ("#define MASK_WAS_SAVED_OFFSET %d\n", offsetof (struct __jmp_buf_tag, __mask_was_saved));
+       printf ("#define SAVED_MASK_OFFSET %d\n", offsetof (struct __jmp_buf_tag, __saved_mask));
+   } */
+
+# define JMP_BUF_SIZE 240
+# define JMP_BUF_ALIGN 8
+# define SIGJMP_BUF_SIZE 240
+# define SIGJMP_BUF_ALIGN 8
+# define MASK_WAS_SAVED_OFFSET 104
+# define SAVED_MASK_OFFSET 112
-- 
2.34.0

