From e0fa99acf4cbe76387489da7c58aa3a221fd7892 Mon Sep 17 00:00:00 2001
From: Xi Ruoyao <xry111@mengyan1223.wang>
Date: Tue, 24 Aug 2021 03:54:23 +0800
Subject: [PATCH 22/51] loongarch: align stack in clone

The ELF ABI document of LoongArch is not completed yet, but by reading
GCC code it seems LoongArch prefers 16-byte aligned stack for LP64 and
8-byte aligned stack for LP32, like MIPS.  Previously if the caller
passed an unaligned stack to clone, the child would misbehave.

Glibc-2.34 has been designed to align the stack in library code, so the
caller won't need to take care of stack alignment anymore calling clone.
See commit 92a7d134.

This commit fixes test failures of "misc/tst-misalign-clone" and
"misc/tst-misalign-clone-internal".
---
 sysdeps/unix/sysv/linux/loongarch/clone.S | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/sysdeps/unix/sysv/linux/loongarch/clone.S b/sysdeps/unix/sysv/linux/loongarch/clone.S
index 0b5c467bd6..da335066d7 100644
--- a/sysdeps/unix/sysv/linux/loongarch/clone.S
+++ b/sysdeps/unix/sysv/linux/loongarch/clone.S
@@ -31,6 +31,14 @@
 
 ENTRY (__clone)
 
+	/* Align stack to 16 or 8 bytes per the ABI.  */
+#if _LOONGARCH_SIM == _ABILP64
+	addi.d		t0, zero, -16
+#elif _LOONGARCH_SIM == _ABILP32
+	addi.w		t0, zero, -8
+#endif
+	and		a1, a1, t0
+
 	/* Sanity check arguments.  */
 	beqz		a0, L (invalid) /* No NULL function pointers.  */
 	beqz		a1, L (invalid) /* No NULL stack pointers.  */
-- 
2.34.0

