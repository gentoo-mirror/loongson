From 237a71769ebaed07a3cad9f55123b0fb4e68e941 Mon Sep 17 00:00:00 2001
From: WANG Xuerui <git@xen0n.name>
Date: Mon, 20 Mar 2023 17:35:11 +0800
Subject: [PATCH 38/48] cmd/asm: add support for the rest of loong64 unary
 bitops

All remaining unary bitop instructions in the LoongArch v1.00 base ISA
are added with this change.

While at it, add the missing W suffix to the current CLO/CLZ names. They
are not used anywhere as far as we know, so no breakage is expected.
Also, stop reusing SLL's instruction format for simplicity, in favor of
a new but trivial instruction format case.

Change-Id: Ic3fa67ff40fa492ef611c6c5351bea727f0f6508
(cherry picked from commit 963456291ccc98df4d90435c0b3cc95a197e82b2)
---
 .../asm/internal/asm/testdata/loong64enc1.s   | 22 +++++-
 src/cmd/internal/obj/loong64/a.out.go         | 23 +++++-
 src/cmd/internal/obj/loong64/anames.go        | 22 +++++-
 src/cmd/internal/obj/loong64/asm.go           | 79 ++++++++++++++++---
 4 files changed, 127 insertions(+), 19 deletions(-)

diff --git a/src/cmd/asm/internal/asm/testdata/loong64enc1.s b/src/cmd/asm/internal/asm/testdata/loong64enc1.s
index c0abf31f7c..e034d548aa 100644
--- a/src/cmd/asm/internal/asm/testdata/loong64enc1.s
+++ b/src/cmd/asm/internal/asm/testdata/loong64enc1.s
@@ -49,8 +49,26 @@ lable2:
 	SLLV	R4, R5, R6		// a6901800
 	ROTRV	R4, R5			// a5901b00
 	ROTRV	R4, R5, R6		// a6901b00
-	CLO	R4, R5			// 85100000
-	CLZ	R4, R5			// 85140000
+	CLOW	R4, R5			// 85100000
+	CLZW	R4, R5			// 85140000
+	CTOW	R4, R5			// 85180000
+	CTZW	R4, R5			// 851c0000
+	CLOV	R4, R5			// 85200000
+	CLZV	R4, R5			// 85240000
+	CTOV	R4, R5			// 85280000
+	CTZV	R4, R5			// 852c0000
+	REVB2H	R4, R5			// 85300000
+	REVB4H	R4, R5			// 85340000
+	REVB2W	R4, R5			// 85380000
+	REVBV	R4, R5			// 853c0000
+	REVH2W	R4, R5			// 85400000
+	REVHV	R4, R5			// 85440000
+	BITREV4B	R4, R5		// 85480000
+	BITREVW	R4, R5			// 85500000
+	BITREV8B	R4, R5		// 854c0000
+	BITREVV	R4, R5			// 85540000
+	EXTWB	R4, R5			// 855c0000
+	EXTWH	R4, R5			// 85580000
 	ADDF	F4, F5			// a5900001
 	ADDF	F4, R5, F6		// a6900001
 	CMPEQF	F4, R5			// a010120c
diff --git a/src/cmd/internal/obj/loong64/a.out.go b/src/cmd/internal/obj/loong64/a.out.go
index 679912242a..ad92791e10 100644
--- a/src/cmd/internal/obj/loong64/a.out.go
+++ b/src/cmd/internal/obj/loong64/a.out.go
@@ -252,8 +252,6 @@ const (
 
 	ABNE
 	ABREAK
-	ACLO
-	ACLZ
 
 	ACMPEQD
 	ACMPEQF
@@ -354,6 +352,15 @@ const (
 
 	AXOR
 
+	ABITREV4B
+	ABITREVW
+	ACLOW
+	ACLZW
+	ACTOW
+	ACTZW
+	AREVB2H
+	AEXTWB
+	AEXTWH
 	AMASKEQZ
 	AMASKNEZ
 
@@ -381,6 +388,18 @@ const (
 	ASUBV
 	ASUBVU
 
+	ABITREV8B
+	ABITREVV
+	ACLOV
+	ACLZV
+	ACTOV
+	ACTZV
+	AREVB4H
+	AREVB2W
+	AREVBV
+	AREVH2W
+	AREVHV
+
 	// 64-bit FP
 	ATRUNCFV
 	ATRUNCDV
diff --git a/src/cmd/internal/obj/loong64/anames.go b/src/cmd/internal/obj/loong64/anames.go
index c6342438b1..da6b578ebf 100644
--- a/src/cmd/internal/obj/loong64/anames.go
+++ b/src/cmd/internal/obj/loong64/anames.go
@@ -22,8 +22,6 @@ var Anames = []string{
 	"BFPT",
 	"BNE",
 	"BREAK",
-	"CLO",
-	"CLZ",
 	"CMPEQD",
 	"CMPEQF",
 	"CMPGED",
@@ -101,6 +99,15 @@ var Anames = []string{
 	"TNE",
 	"WORD",
 	"XOR",
+	"BITREV4B",
+	"BITREVW",
+	"CLOW",
+	"CLZW",
+	"CTOW",
+	"CTZW",
+	"REVB2H",
+	"EXTWB",
+	"EXTWH",
 	"MASKEQZ",
 	"MASKNEZ",
 	"MOVV",
@@ -122,6 +129,17 @@ var Anames = []string{
 	"ADDVU",
 	"SUBV",
 	"SUBVU",
+	"BITREV8B",
+	"BITREVV",
+	"CLOV",
+	"CLZV",
+	"CTOV",
+	"CTZV",
+	"REVB4H",
+	"REVB2W",
+	"REVBV",
+	"REVH2W",
+	"REVHV",
 	"TRUNCFV",
 	"TRUNCDV",
 	"TRUNCFW",
diff --git a/src/cmd/internal/obj/loong64/asm.go b/src/cmd/internal/obj/loong64/asm.go
index 5f18e88923..cacaaf0154 100644
--- a/src/cmd/internal/obj/loong64/asm.go
+++ b/src/cmd/internal/obj/loong64/asm.go
@@ -79,7 +79,7 @@ var optab = []Optab{
 	{ASLL, C_REG, C_REG, C_NONE, C_REG, C_NONE, 9, 4, 0, 0},
 	{ASLLV, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 9, 4, 0, 0},
 	{ASLLV, C_REG, C_REG, C_NONE, C_REG, C_NONE, 9, 4, 0, 0},
-	{ACLO, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 9, 4, 0, 0},
+	{ACLOW, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 66, 4, 0, 0},
 
 	{AADDF, C_FREG, C_NONE, C_NONE, C_FREG, C_NONE, 32, 4, 0, 0},
 	{AADDF, C_FREG, C_REG, C_NONE, C_FREG, C_NONE, 32, 4, 0, 0},
@@ -1171,8 +1171,26 @@ func buildop(ctxt *obj.Link) {
 			obj.ADUFFCOPY:
 			break
 
-		case ACLO:
-			opset(ACLZ, r0)
+		case ACLOW:
+			opset(ACLZW, r0)
+			opset(ACTOW, r0)
+			opset(ACTZW, r0)
+			opset(ACLOV, r0)
+			opset(ACLZV, r0)
+			opset(ACTOV, r0)
+			opset(ACTZV, r0)
+			opset(AREVB2H, r0)
+			opset(AREVB4H, r0)
+			opset(AREVB2W, r0)
+			opset(AREVBV, r0)
+			opset(AREVH2W, r0)
+			opset(AREVHV, r0)
+			opset(ABITREV4B, r0)
+			opset(ABITREV8B, r0)
+			opset(ABITREVW, r0)
+			opset(ABITREVV, r0)
+			opset(AEXTWB, r0)
+			opset(AEXTWH, r0)
 
 		case ATEQ:
 			opset(ATNE, r0)
@@ -1351,15 +1369,11 @@ func (c *ctxt0) asmout(p *obj.Prog, o *Optab, out []uint32) {
 		o1 = OP_12IRR(c.opirr(-p.As), uint32(v), uint32(r), uint32(p.To.Reg))
 
 	case 9: // sll r1,[r2],r3
-		if p.As != ACLO && p.As != ACLZ {
-			r := int(p.Reg)
-			if r == 0 {
-				r = int(p.To.Reg)
-			}
-			o1 = OP_RRR(c.oprrr(p.As), uint32(p.From.Reg), uint32(r), uint32(p.To.Reg))
-		} else { // clo r1,r2
-			o1 = OP_RR(c.oprr(p.As), uint32(p.From.Reg), uint32(p.To.Reg))
+		r := int(p.Reg)
+		if r == 0 {
+			r = int(p.To.Reg)
 		}
+		o1 = OP_RRR(c.oprrr(p.As), uint32(p.From.Reg), uint32(r), uint32(p.To.Reg))
 
 	case 10: // add $con,[r1],r2 ==> mov $con, t; add t,[r1],r2
 		v := c.regoff(&p.From)
@@ -1799,6 +1813,9 @@ func (c *ctxt0) asmout(p *obj.Prog, o *Optab, out []uint32) {
 			r = int(p.RestArgs[0].Reg)
 		}
 		o1 = OP_RRRR(c.oprrrr(p.As), uint32(p.From.Reg), uint32(p.Reg), uint32(r), uint32(p.To.Reg))
+
+	case 66: // clo.w r1, r2
+		o1 = OP_RR(c.oprr(p.As), uint32(p.From.Reg), uint32(p.To.Reg))
 	}
 
 	out[0] = o1
@@ -2002,10 +2019,46 @@ func (c *ctxt0) oprrr(a obj.As) uint32 {
 
 func (c *ctxt0) oprr(a obj.As) uint32 {
 	switch a {
-	case ACLO:
+	case ACLOW:
 		return 0x4 << 10
-	case ACLZ:
+	case ACLZW:
 		return 0x5 << 10
+	case ACTOW:
+		return 0x6 << 10
+	case ACTZW:
+		return 0x7 << 10
+	case ACLOV:
+		return 0x8 << 10
+	case ACLZV:
+		return 0x9 << 10
+	case ACTOV:
+		return 0xa << 10
+	case ACTZV:
+		return 0xb << 10
+	case AREVB2H:
+		return 0xc << 10
+	case AREVB4H:
+		return 0xd << 10
+	case AREVB2W:
+		return 0xe << 10
+	case AREVBV:
+		return 0xf << 10
+	case AREVH2W:
+		return 0x10 << 10
+	case AREVHV:
+		return 0x11 << 10
+	case ABITREV4B:
+		return 0x12 << 10
+	case ABITREV8B:
+		return 0x13 << 10
+	case ABITREVW:
+		return 0x14 << 10
+	case ABITREVV:
+		return 0x15 << 10
+	case AEXTWH:
+		return 0x16 << 10
+	case AEXTWB:
+		return 0x17 << 10
 	case ARDTIMELW:
 		return 0x18 << 10
 	case ARDTIMEHW:
-- 
2.40.0

