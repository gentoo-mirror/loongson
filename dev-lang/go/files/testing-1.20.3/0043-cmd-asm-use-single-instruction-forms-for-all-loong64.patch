From b487c05d4c466f96697fb0e5243fe83f38809bf8 Mon Sep 17 00:00:00 2001
From: WANG Xuerui <git@xen0n.name>
Date: Mon, 20 Mar 2023 21:29:43 +0800
Subject: [PATCH 43/48] cmd/asm: use single-instruction forms for all loong64
 sign and zero extensions
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

8- and 16-bit sign extensions and 32-bit zero extensions were realized
with left and right shifts before this change. We now support assembling
EXTWB, EXTWH and BSTRPICKV, so all three can be done with a single insn
respectively.

Benchmark results on Loongson 3A5000:

goos: linux
goarch: loong64
pkg: test/bench/go1
                      │  CL 479495  │              this CL               │
                      │   sec/op    │   sec/op     vs base               │
BinaryTree17             14.12 ± 1%    14.06 ± 1%       ~ (p=0.393 n=10)
Fannkuch11               3.420 ± 0%    3.421 ± 0%  +0.04% (p=0.001 n=10)
FmtFprintfEmpty         94.72n ± 0%   94.97n ± 0%  +0.26% (p=0.000 n=10)
FmtFprintfString        152.6n ± 0%   155.3n ± 0%  +1.77% (p=0.000 n=10)
FmtFprintfInt           154.5n ± 0%   154.5n ± 0%       ~ (p=0.263 n=10)
FmtFprintfIntInt        237.7n ± 0%   237.1n ± 0%  -0.21% (p=0.000 n=10)
FmtFprintfPrefixedInt   313.1n ± 0%   313.0n ± 0%  -0.03% (p=0.000 n=10)
FmtFprintfFloat         394.1n ± 0%   392.8n ± 0%  -0.32% (p=0.000 n=10)
FmtManyArgs             934.3n ± 0%   912.6n ± 0%  -2.32% (p=0.000 n=10)
GobDecode               15.29m ± 1%   15.23m ± 1%       ~ (p=0.280 n=10)
GobEncode               17.76m ± 0%   17.66m ± 0%  -0.60% (p=0.000 n=10)
Gzip                    416.0m ± 0%   404.4m ± 0%  -2.79% (p=0.000 n=10)
Gunzip                  83.20m ± 0%   80.88m ± 0%  -2.79% (p=0.000 n=10)
HTTPClientServer        87.82µ ± 1%   87.09µ ± 1%  -0.83% (p=0.000 n=10)
JSONEncode              18.56m ± 0%   18.54m ± 0%       ~ (p=0.123 n=10)
JSONDecode              76.53m ± 0%   78.22m ± 1%  +2.21% (p=0.000 n=10)
Mandelbrot200           7.217m ± 0%   7.215m ± 0%       ~ (p=0.143 n=10)
GoParse                 7.587m ± 1%   7.520m ± 1%       ~ (p=0.165 n=10)
RegexpMatchEasy0_32     134.2n ± 0%   134.5n ± 0%  +0.22% (p=0.000 n=10)
RegexpMatchEasy0_1K     1.366µ ± 0%   1.364µ ± 0%  -0.15% (p=0.000 n=10)
RegexpMatchEasy1_32     163.0n ± 0%   164.0n ± 0%  +0.61% (p=0.000 n=10)
RegexpMatchEasy1_1K     1.497µ ± 0%   1.492µ ± 0%  -0.33% (p=0.000 n=10)
RegexpMatchMedium_32    1.415µ ± 0%   1.403µ ± 0%  -0.85% (p=0.000 n=10)
RegexpMatchMedium_1K    41.61µ ± 0%   41.05µ ± 0%  -1.36% (p=0.000 n=10)
RegexpMatchHard_32      2.121µ ± 0%   2.070µ ± 0%  -2.43% (p=0.000 n=10)
RegexpMatchHard_1K      62.64µ ± 0%   60.87µ ± 0%  -2.83% (p=0.000 n=10)
Revcomp                  1.204 ± 0%    1.210 ± 0%  +0.51% (p=0.000 n=10)
Template                118.0m ± 0%   115.2m ± 1%  -2.31% (p=0.000 n=10)
TimeParse               414.8n ± 0%   410.6n ± 0%  -1.01% (p=0.000 n=10)
TimeFormat              510.7n ± 0%   508.2n ± 0%  -0.48% (p=0.000 n=10)
geomean                 102.3µ        101.7µ       -0.60%

                     │  CL 479495   │               this CL               │
                     │     B/s      │     B/s       vs base               │
GobDecode              47.88Mi ± 1%   48.05Mi ± 1%       ~ (p=0.280 n=10)
GobEncode              41.20Mi ± 0%   41.45Mi ± 0%  +0.60% (p=0.000 n=10)
Gzip                   44.49Mi ± 0%   45.77Mi ± 0%  +2.87% (p=0.000 n=10)
Gunzip                 222.4Mi ± 0%   228.8Mi ± 0%  +2.87% (p=0.000 n=10)
JSONEncode             99.69Mi ± 0%   99.82Mi ± 0%       ~ (p=0.118 n=10)
JSONDecode             24.19Mi ± 0%   23.66Mi ± 1%  -2.19% (p=0.000 n=10)
GoParse                7.281Mi ± 2%   7.343Mi ± 1%       ~ (p=0.187 n=10)
RegexpMatchEasy0_32    227.4Mi ± 0%   226.9Mi ± 0%  -0.22% (p=0.000 n=10)
RegexpMatchEasy0_1K    715.0Mi ± 0%   716.0Mi ± 0%  +0.13% (p=0.000 n=10)
RegexpMatchEasy1_32    187.3Mi ± 0%   186.1Mi ± 0%  -0.62% (p=0.000 n=10)
RegexpMatchEasy1_1K    652.3Mi ± 0%   654.5Mi ± 0%  +0.34% (p=0.000 n=10)
RegexpMatchMedium_32   21.57Mi ± 0%   21.74Mi ± 0%  +0.80% (p=0.000 n=10)
RegexpMatchMedium_1K   23.47Mi ± 0%   23.79Mi ± 0%  +1.38% (p=0.000 n=10)
RegexpMatchHard_32     14.39Mi ± 0%   14.74Mi ± 0%  +2.45% (p=0.000 n=10)
RegexpMatchHard_1K     15.59Mi ± 0%   16.04Mi ± 0%  +2.87% (p=0.000 n=10)
Revcomp                201.3Mi ± 0%   200.3Mi ± 0%  -0.51% (p=0.000 n=10)
Template               15.69Mi ± 0%   16.06Mi ± 1%  +2.37% (p=0.000 n=10)
geomean                61.31Mi        61.82Mi       +0.84%

The test binaries were pre-compiled with `go test -c`, and the test runs
were wrapped with `perf stat record` for recording dynamic instruction
counts. The instruction count, IPC and branch misprediction rate did not
meaningfully change.

As for the JSONDecode regression, `perf stat` is used to check
micro-architectural details:

$ sudo perf stat <test executable> -test.timeout=30m -test.run='^$' \
    -test.cpu=1 -test.bench='JSONDecode' -test.count=1 -test.benchtime=50x

Before:

          4,256.10 msec task-clock               #    1.061 CPUs utilized
            61,431      context-switches         #   14.434 K/sec
                 3      cpu-migrations           #    0.705 /sec
             3,297      page-faults              #  774.652 /sec
    10,364,990,422      cycles                   #    2.435 GHz
    19,640,571,817      instructions             #    1.89  insn per cycle
     4,267,623,324      branches                 #    1.003 G/sec
        44,164,375      branch-misses            #    1.03% of all branches

After:

          4,343.17 msec task-clock               #    1.061 CPUs utilized
            62,742      context-switches         #   14.446 K/sec
                 5      cpu-migrations           #    1.151 /sec
             3,044      page-faults              #  700.871 /sec
    10,577,322,342      cycles                   #    2.435 GHz
    19,582,895,547      instructions             #    1.85  insn per cycle
     4,266,051,537      branches                 #  982.244 M/sec
        46,298,286      branch-misses            #    1.09% of all branches

Instruction count decreased by 0.29% but cycle count went up by 2.05%,
while branch misprediction rate raised too. This is likely caused by the
micro-architecture's sensitivity towards changed code layout; the
optimization implemented here should be a net win otherwise.

Updates #59120

Change-Id: Ia7dd0dfe20c0ea3e64889e2b38c6b2118b50d56e
(cherry picked from commit 6c2c3c8470a0a5d0e756e50cf45f140d553ef0b2)
---
 .../asm/internal/asm/testdata/loong64enc1.s   |  3 ++
 .../asm/internal/asm/testdata/loong64enc2.s   |  3 --
 src/cmd/internal/obj/loong64/asm.go           | 38 ++++++++-----------
 3 files changed, 18 insertions(+), 26 deletions(-)

diff --git a/src/cmd/asm/internal/asm/testdata/loong64enc1.s b/src/cmd/asm/internal/asm/testdata/loong64enc1.s
index 2d5b73245c..50db5aa586 100644
--- a/src/cmd/asm/internal/asm/testdata/loong64enc1.s
+++ b/src/cmd/asm/internal/asm/testdata/loong64enc1.s
@@ -22,7 +22,10 @@ lable2:
 	MOVW	$4096, R4		// 24000014
 	MOVV	$65536, R4		// 04020014
 	MOVV	$4096, R4		// 24000014
+	MOVB	R4, R5			// 855c0000
+	MOVH	R4, R5			// 85580000
 	MOVW	R4, R5			// 85001700
+	MOVWU	R4, R5			// 8500df00
 	MOVV	R4, R5			// 85001500
 	MOVBU	R4, R5			// 85fc4303
 	SUB	R4, R5, R6		// a6101100
diff --git a/src/cmd/asm/internal/asm/testdata/loong64enc2.s b/src/cmd/asm/internal/asm/testdata/loong64enc2.s
index 00768365b6..e497b83627 100644
--- a/src/cmd/asm/internal/asm/testdata/loong64enc2.s
+++ b/src/cmd/asm/internal/asm/testdata/loong64enc2.s
@@ -5,8 +5,6 @@
 #include "../../../../../runtime/textflag.h"
 
 TEXT asmtest(SB),DUPOK|NOSPLIT,$0
-	MOVB	R4, R5			// 85e04000a5e04800
-	MOVWU	R4, R5			// 85804100a5804500
 	MOVW	$74565, R4		// 4402001484148d03
 	MOVW	$4097, R4		// 2400001484048003
 	MOVV	$74565, R4		// 4402001484148d03
@@ -59,7 +57,6 @@ TEXT asmtest(SB),DUPOK|NOSPLIT,$0
 	XOR	$4096, R4		// 3e00001484f81500
 	XOR	$-1, R4, R5		// 1efcbf0285f81500
 	XOR	$-1, R4			// 1efcbf0284f81500
-	MOVH	R4, R5			// 85c04000a5c04800
 
 	// relocation instructions
 	MOVW	R4, name(SB)		// 1e00001ac4038029
diff --git a/src/cmd/internal/obj/loong64/asm.go b/src/cmd/internal/obj/loong64/asm.go
index 77958d5a72..10fb6c52d0 100644
--- a/src/cmd/internal/obj/loong64/asm.go
+++ b/src/cmd/internal/obj/loong64/asm.go
@@ -57,9 +57,9 @@ var optab = []Optab{
 
 	{AMOVW, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 1, 4, 0, 0},
 	{AMOVV, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 1, 4, 0, 0},
-	{AMOVB, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 12, 8, 0, NOTUSETMP},
-	{AMOVBU, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 13, 4, 0, 0},
-	{AMOVWU, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 14, 8, 0, NOTUSETMP},
+	{AMOVB, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 12, 4, 0, 0},
+	{AMOVBU, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 12, 4, 0, 0},
+	{AMOVWU, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 12, 4, 0, 0},
 
 	{ASUB, C_REG, C_REG, C_NONE, C_REG, C_NONE, 2, 4, 0, 0},
 	{ASUBV, C_REG, C_REG, C_NONE, C_REG, C_NONE, 2, 4, 0, 0},
@@ -1453,29 +1453,21 @@ func (c *ctxt0) asmout(p *obj.Prog, o *Optab, out []uint32) {
 		rel.Type = objabi.R_CALLLOONG64
 
 	case 12: // movbs r,r
-		// NOTE: this case does not use REGTMP. If it ever does,
-		// remove the NOTUSETMP flag in optab.
-		v := 16
-		if p.As == AMOVB {
-			v = 24
-		}
-		o1 = OP_16IRR(c.opirr(ASLL), uint32(v), uint32(p.From.Reg), uint32(p.To.Reg))
-		o2 = OP_16IRR(c.opirr(ASRA), uint32(v), uint32(p.To.Reg), uint32(p.To.Reg))
-
-	case 13: // movbu r,r
-		if p.As == AMOVBU {
+		switch p.As {
+		case AMOVB:
+			o1 = OP_RR(c.oprr(AEXTWB), uint32(p.From.Reg), uint32(p.To.Reg))
+		case AMOVH:
+			o1 = OP_RR(c.oprr(AEXTWH), uint32(p.From.Reg), uint32(p.To.Reg))
+		case AMOVBU:
 			o1 = OP_12IRR(c.opirr(AAND), uint32(0xff), uint32(p.From.Reg), uint32(p.To.Reg))
-		} else {
-			// bstrpick.d (msbd=15, lsbd=0)
-			o1 = (0x33c0 << 10) | ((uint32(p.From.Reg) & 0x1f) << 5) | (uint32(p.To.Reg) & 0x1F)
+		case AMOVHU:
+			o1 = OP_I6I6RR(c.opiirr(ABSTRPICKV), 15, 0, uint32(p.From.Reg), uint32(p.To.Reg))
+		case AMOVWU:
+			o1 = OP_I6I6RR(c.opiirr(ABSTRPICKV), 31, 0, uint32(p.From.Reg), uint32(p.To.Reg))
+		default:
+			c.ctxt.Diag("unexpected encoding\n%v", p)
 		}
 
-	case 14: // movwu r,r
-		// NOTE: this case does not use REGTMP. If it ever does,
-		// remove the NOTUSETMP flag in optab.
-		o1 = OP_16IRR(c.opirr(-ASLLV), uint32(32)&0x3f, uint32(p.From.Reg), uint32(p.To.Reg))
-		o2 = OP_16IRR(c.opirr(-ASRLV), uint32(32)&0x3f, uint32(p.To.Reg), uint32(p.To.Reg))
-
 	case 15: // teq $c r,r
 		v := c.regoff(&p.From)
 		r := int(p.Reg)
-- 
2.40.0

