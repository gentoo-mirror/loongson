From 6d613c29269289e71bb6f5de2912fa7587906f3d Mon Sep 17 00:00:00 2001
From: WANG Xuerui <git@xen0n.name>
Date: Sat, 25 Mar 2023 13:27:37 +0800
Subject: [PATCH 42/48] cmd/asm: add support for loong64 "bit-string"
 instructions

They are binary operations with two extra immediate operands for
specifying the bit field range.

Change-Id: Ie38042c497d6c338fe8a0079ee6d25446f2b6e3f
(cherry picked from commit d37ffc77f18901df7969c23ce5def73de55bd032)
---
 src/cmd/asm/internal/arch/loong64.go          | 14 ++++
 src/cmd/asm/internal/asm/asm.go               | 16 ++++
 .../asm/internal/asm/testdata/loong64enc1.s   |  9 +++
 src/cmd/internal/obj/loong64/a.out.go         |  4 +
 src/cmd/internal/obj/loong64/anames.go        |  4 +
 src/cmd/internal/obj/loong64/asm.go           | 76 +++++++++++++++++++
 6 files changed, 123 insertions(+)

diff --git a/src/cmd/asm/internal/arch/loong64.go b/src/cmd/asm/internal/arch/loong64.go
index 2958ee1a86..7ac147636b 100644
--- a/src/cmd/asm/internal/arch/loong64.go
+++ b/src/cmd/asm/internal/arch/loong64.go
@@ -55,6 +55,20 @@ func IsLoong64RDTIME(op obj.As) bool {
 	return false
 }
 
+// IsLoong64BSTR reports whether the op (as defined by an loong64.A* constant)
+// is one of the "bit-string" manipulation instructions that require special
+// handling.
+func IsLoong64BSTR(op obj.As) bool {
+	switch op {
+	case loong64.ABSTRINSW,
+		loong64.ABSTRPICKW,
+		loong64.ABSTRINSV,
+		loong64.ABSTRPICKV:
+		return true
+	}
+	return false
+}
+
 func loong64RegisterNumber(name string, n int16) (int16, bool) {
 	switch name {
 	case "F":
diff --git a/src/cmd/asm/internal/asm/asm.go b/src/cmd/asm/internal/asm/asm.go
index eed49bac33..695e0c448a 100644
--- a/src/cmd/asm/internal/asm/asm.go
+++ b/src/cmd/asm/internal/asm/asm.go
@@ -664,6 +664,14 @@ func (p *Parser) asmInstruction(op obj.As, cond string, a []obj.Addr) {
 			prog.Reg = p.getRegister(prog, op, &a[1])
 			prog.To = a[2]
 		case sys.Loong64:
+			if arch.IsLoong64BSTR(op) {
+				// a[0] and a[1] must be constants, a[2] must
+				// be a register
+				prog.From = a[0]
+				prog.SetRestArgs([]obj.Addr{a[1]})
+				prog.To = a[2]
+				break
+			}
 			prog.From = a[0]
 			prog.Reg = p.getRegister(prog, op, &a[1])
 			prog.To = a[2]
@@ -816,6 +824,14 @@ func (p *Parser) asmInstruction(op obj.As, cond string, a []obj.Addr) {
 			break
 		}
 		if p.arch.Family == sys.Loong64 {
+			if arch.IsLoong64BSTR(op) {
+				// a[0] and a[1] must be constants
+				// a[2] and a[3] must be registers
+				prog.From = a[0]
+				prog.SetRestArgs([]obj.Addr{a[1], a[2]})
+				prog.To = a[3]
+				break
+			}
 			prog.From = a[0]
 			prog.Reg = p.getRegister(prog, op, &a[1])
 			prog.SetRestArgs([]obj.Addr{a[2]})
diff --git a/src/cmd/asm/internal/asm/testdata/loong64enc1.s b/src/cmd/asm/internal/asm/testdata/loong64enc1.s
index 25a8150cef..2d5b73245c 100644
--- a/src/cmd/asm/internal/asm/testdata/loong64enc1.s
+++ b/src/cmd/asm/internal/asm/testdata/loong64enc1.s
@@ -164,6 +164,15 @@ lable2:
 	BREAK				// 00002a00
 	UNDEF				// 00002a00
 
+	BSTRINSW	$31, $30, R5		// a5787f00
+	BSTRINSW	$31, $30, R4, R5	// 85787f00
+	BSTRPICKW	$31, $30, R5		// a5f87f00
+	BSTRPICKW	$31, $30, R4, R5	// 85f87f00
+	BSTRINSV	$63, $62, R5		// a5f8bf00
+	BSTRINSV	$63, $62, R4, R5	// 85f8bf00
+	BSTRPICKV	$63, $62, R5		// a5f8ff00
+	BSTRPICKV	$63, $62, R4, R5	// 85f8ff00
+
 	// mul
 	MUL	R4, R5	  		// a5101c00
 	MUL	R4, R5, R6	  	// a6101c00
diff --git a/src/cmd/internal/obj/loong64/a.out.go b/src/cmd/internal/obj/loong64/a.out.go
index 7efbaada1e..e93ea31d2d 100644
--- a/src/cmd/internal/obj/loong64/a.out.go
+++ b/src/cmd/internal/obj/loong64/a.out.go
@@ -363,6 +363,8 @@ const (
 	AEXTWH
 	AMASKEQZ
 	AMASKNEZ
+	ABSTRINSW
+	ABSTRPICKW
 
 	// 64-bit
 	AMOVV
@@ -399,6 +401,8 @@ const (
 	AREVBV
 	AREVH2W
 	AREVHV
+	ABSTRINSV
+	ABSTRPICKV
 
 	ACRCWBW
 	ACRCWHW
diff --git a/src/cmd/internal/obj/loong64/anames.go b/src/cmd/internal/obj/loong64/anames.go
index cd6764e4d8..d42b6a7a6f 100644
--- a/src/cmd/internal/obj/loong64/anames.go
+++ b/src/cmd/internal/obj/loong64/anames.go
@@ -110,6 +110,8 @@ var Anames = []string{
 	"EXTWH",
 	"MASKEQZ",
 	"MASKNEZ",
+	"BSTRINSW",
+	"BSTRPICKW",
 	"MOVV",
 	"MOVVL",
 	"MOVVR",
@@ -140,6 +142,8 @@ var Anames = []string{
 	"REVBV",
 	"REVH2W",
 	"REVHV",
+	"BSTRINSV",
+	"BSTRPICKV",
 	"CRCWBW",
 	"CRCWHW",
 	"CRCWWW",
diff --git a/src/cmd/internal/obj/loong64/asm.go b/src/cmd/internal/obj/loong64/asm.go
index 51600f1c8e..77958d5a72 100644
--- a/src/cmd/internal/obj/loong64/asm.go
+++ b/src/cmd/internal/obj/loong64/asm.go
@@ -81,6 +81,8 @@ var optab = []Optab{
 	{ASLLV, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 9, 4, 0, 0},
 	{ASLLV, C_REG, C_REG, C_NONE, C_REG, C_NONE, 9, 4, 0, 0},
 	{ACLOW, C_REG, C_NONE, C_NONE, C_REG, C_NONE, 66, 4, 0, 0},
+	{ABSTRINSW, C_SCON, C_NONE, C_SCON, C_REG, C_NONE, 67, 4, 0, 0},
+	{ABSTRINSW, C_SCON, C_REG, C_SCON, C_REG, C_NONE, 67, 4, 0, 0},
 
 	{AADDF, C_FREG, C_NONE, C_NONE, C_FREG, C_NONE, 32, 4, 0, 0},
 	{AADDF, C_FREG, C_REG, C_NONE, C_FREG, C_NONE, 32, 4, 0, 0},
@@ -579,6 +581,11 @@ func span0(ctxt *obj.Link, cursym *obj.LSym, newprog obj.ProgAlloc) {
 func (c *ctxt0) isUnsafePoint(p *obj.Prog) bool {
 	// If p explicitly uses REGTMP, it's unsafe to preempt, because the
 	// preemption sequence clobbers REGTMP.
+	for _, a := range p.RestArgs {
+		if a.Type == obj.TYPE_REG && a.Reg == REGTMP {
+			return true
+		}
+	}
 	return p.From.Reg == REGTMP || p.To.Reg == REGTMP || p.Reg == REGTMP
 }
 
@@ -819,6 +826,20 @@ func (c *ctxt0) oplook(p *obj.Prog) *Optab {
 	if p.Reg != 0 {
 		a2 = C_REG
 	}
+	// Special-case the BSTR instructions, that have their source register
+	// operand in RestArgs[1] (if present) instead of Reg, in order to
+	// preserve ergonomic operand order in asm sources.
+	switch p.As {
+	case ABSTRINSW, ABSTRPICKW, ABSTRINSV, ABSTRPICKV:
+		if len(p.RestArgs) > 1 {
+			a2 = int(p.RestArgs[1].Class)
+			if a2 == 0 {
+				a2 = c.aclass(&p.RestArgs[1].Addr) + 1
+				p.RestArgs[1].Class = int8(a2)
+			}
+			a2--
+		}
+	}
 
 	// 2nd destination operand
 	a5 := C_NONE
@@ -1207,6 +1228,11 @@ func buildop(ctxt *obj.Link) {
 			opset(ACRCCWHW, r0)
 			opset(ACRCCWWW, r0)
 			opset(ACRCCWVW, r0)
+
+		case ABSTRINSW:
+			opset(ABSTRPICKW, r0)
+			opset(ABSTRINSV, r0)
+			opset(ABSTRPICKV, r0)
 		}
 	}
 }
@@ -1234,6 +1260,14 @@ func OP_RRRR(op uint32, r1 uint32, r2 uint32, r3 uint32, r4 uint32) uint32 {
 	return op | (r1&0x1F)<<15 | (r2&0x1F)<<10 | (r3&0x1F)<<5 | (r4 & 0x1F)
 }
 
+func OP_I5I5RR(op uint32, imm1 uint32, imm2 uint32, r1 uint32, r2 uint32) uint32 {
+	return op | (imm1&0x1F)<<16 | (imm2 & 0x1F << 10) | (r1&0x1F)<<5 | (r2 & 0x1F)
+}
+
+func OP_I6I6RR(op uint32, imm1 uint32, imm2 uint32, r1 uint32, r2 uint32) uint32 {
+	return op | (imm1&0x3F)<<16 | (imm2 & 0x3F << 10) | (r1&0x1F)<<5 | (r2 & 0x1F)
+}
+
 // r2 -> rj
 // r3 -> rd
 func OP_RR(op uint32, r2 uint32, r3 uint32) uint32 {
@@ -1826,6 +1860,32 @@ func (c *ctxt0) asmout(p *obj.Prog, o *Optab, out []uint32) {
 
 	case 66: // clo.w r1, r2
 		o1 = OP_RR(c.oprr(p.As), uint32(p.From.Reg), uint32(p.To.Reg))
+
+	case 67: // BSTRINSW $msb, $lsb, [rj], rd ==> bstrins.w rd, rj, msb, lsb
+		// From: msb
+		// RestArgs[0]: lsb
+		// RestArgs[1]: rj (or absent)
+		// To: rd (or also rj)
+		//
+		// The official LoongArch assembly syntax has the two immediate
+		// operands' position swapped, so our syntax actually matches
+		// the instruction word layout.
+		imm1 := uint32(c.regoff(&p.From))
+		imm2 := uint32(c.regoff(&p.RestArgs[0].Addr))
+		var r uint32
+		if len(p.RestArgs) > 1 {
+			r = uint32(p.RestArgs[1].Reg)
+		} else {
+			r = uint32(p.To.Reg)
+		}
+		switch p.As {
+		case ABSTRINSW, ABSTRPICKW:
+			o1 = OP_I5I5RR(c.opiirr(p.As), imm1, imm2, r, uint32(p.To.Reg))
+		case ABSTRINSV, ABSTRPICKV:
+			o1 = OP_I6I6RR(c.opiirr(p.As), imm1, imm2, r, uint32(p.To.Reg))
+		default:
+			c.ctxt.Diag("unknown bstr insn\n%v", p)
+		}
 	}
 
 	out[0] = o1
@@ -2279,6 +2339,22 @@ func (c *ctxt0) opirr(a obj.As) uint32 {
 	return 0
 }
 
+func (c *ctxt0) opiirr(a obj.As) uint32 {
+	switch a {
+	case ABSTRINSW:
+		return 0b000000_0001_1_00000_0_00000_00000_00000
+	case ABSTRPICKW:
+		return 0b000000_0001_1_00000_1_00000_00000_00000
+	case ABSTRINSV:
+		return 0b000000_0010_000000_000000_00000_00000
+	case ABSTRPICKV:
+		return 0b000000_0011_000000_000000_00000_00000
+	}
+
+	c.ctxt.Diag("bad iirr opcode %v", a)
+	return 0
+}
+
 func vshift(a obj.As) bool {
 	switch a {
 	case ASLLV,
-- 
2.40.0

